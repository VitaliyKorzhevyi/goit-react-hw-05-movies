{"version":3,"file":"static/js/95.3b75d0d2.chunk.js","mappings":"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","sources":["components/Loader.jsx","pages/Details.jsx","services/api.js"],"sourcesContent":["import { Puff, Triangle } from 'react-loader-spinner';\n\nimport './styled/Loader.css';\n\nconst Loader = () => {\n  return (\n    <div className=\"container-loader\">\n      <Puff\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"white\"\n        ariaLabel=\"three-dots-loading\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n\nexport const Placeholder = () => {\n  return (\n    <Triangle\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      color=\"#ffd447\"\n      ariaLabel=\"triangle-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n    />\n  );\n};\n","import { Suspense, useEffect, useMemo, useState } from 'react';\n\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getCastMovie, getIdMovie, getReviewsMovie } from 'services/api';\n\nimport './styled/Details.css';\n\nimport placeholderBackdrop from '../images/placeholderBackdropDetails.jpg';\nimport placeholderPoster from '../images/placeholderPosterSearch.png';\nimport Loader from 'components/Loader';\n\nconst Details = ({ onGetCast, onGetReviews }) => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const lastPage = location.state?.from ?? '/';\n\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Memoized get запити\n  const memoMovie = useMemo(() => getIdMovie(movieId), [movieId]);\n  const memoCast = useMemo(() => getCastMovie(movieId), [movieId]);\n  const memoReviews = useMemo(() => getReviewsMovie(movieId), [movieId]);\n\n  useEffect(() => {\n    memoMovie.then(res => {\n      if (!res.length > 0) {\n        setMovies(res);\n        setIsLoading(true);\n      }\n    });\n    memoCast.then(res => {\n      onGetCast(res.cast);\n    });\n    memoReviews.then(res => {\n      onGetReviews(res.results);\n    });\n  }, [memoMovie, memoCast, memoReviews, onGetCast, onGetReviews]);\n\n  const {\n    title,\n    overview,\n    vote_average,\n    poster_path,\n    genres,\n    backdrop_path,\n    runtime,\n    release_date,\n    production_countries,\n    original_language,\n    popularity,\n    homepage,\n    tagline,\n  } = movies;\n\n  return (\n    <>\n      <div className=\"container-details\">\n        <div className=\"container-btn-last\">\n          <Link to={lastPage}>\n            <button type=\"button\">\n              <i className=\"bx bx-chevron-left bx-sm bx-fade-left-hover\"></i>\n            </button>\n          </Link>\n        </div>\n        {isLoading ? (\n          <div>\n            <img\n              className=\"background-image\"\n              src={\n                backdrop_path\n                  ? `https://image.tmdb.org/t/p/w500/${backdrop_path}`\n                  : placeholderBackdrop\n              }\n              alt={title}\n            />\n            <div className=\"details-content\">\n              <ul className=\"details-list\">\n                <li>\n                  <h2 className=\"title-details\">\n                    {title} ({release_date && release_date.slice(0, 4)})\n                  </h2>\n                </li>\n                <li className=\"item-details tagline-info\">\n                  <p>\n                    Tagline:{' '}\n                    <span>\n                      <strong> \"{tagline}\"</strong>\n                    </span>\n                  </p>\n                </li>\n                <li className=\"item-details more-info\">\n                  <span className=\"one-info\">\n                    <p>\n                      Genres:{' '}\n                      <strong>\n                        {genres && genres.map(i => i.name).join(', ')}\n                      </strong>\n                    </p>\n                    <p>\n                      {' '}\n                      Countries:\n                      <strong>\n                        {' '}\n                        {production_countries &&\n                          production_countries.map(i => i.name).join(', ')}\n                      </strong>\n                    </p>\n                    <p>\n                      Language:\n                      <strong> {original_language}</strong>\n                    </p>\n                  </span>\n                  <span className=\"two-info\">\n                    <p>\n                      Runtime:{' '}\n                      <strong>\n                        {runtime} minutes / {Math.round(runtime / 60)} hours\n                      </strong>\n                    </p>\n                    <p>\n                      Range:{' '}\n                      <strong>{Math.floor(vote_average * 10) / 10}</strong>\n                    </p>\n\n                    <p>\n                      Popularity:\n                      <strong> {Math.floor(popularity * 10) / 10}</strong>\n                    </p>\n                  </span>\n                </li>\n                <li className=\"item-details three-info\">\n                  <h3>Overview</h3>\n                  <p>{overview}</p>\n                </li>\n                <li className=\"item-details btns-info\">\n                  <button\n                    type=\"button\"\n                    className={homepage ? 'btn-watch' : 'btn-watch-none'}\n                  >\n                    <i className=\"bx bx-right-arrow\"></i>\n                    <a href={homepage ? homepage : ''}>Watch</a>\n                  </button>\n                  <Link to={'cast'}>\n                    <button type=\"button\" className=\"btn-link\">\n                      Top Billed Cast\n                    </button>\n                  </Link>\n                  <Link to={'reviews'}>\n                    <button type=\"button\" className=\"btn-link\">\n                      Reviews\n                    </button>\n                  </Link>\n                </li>\n              </ul>\n              <img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                    : placeholderPoster\n                }\n                alt={title}\n              />\n            </div>\n          </div>\n        ) : (\n          <Loader />\n        )}\n      </div>\n      <div className=\"ellipse-desktop-1\"></div>\n      <div className=\"ellipse-desktop-2\"></div>\n      <div className=\"ellipse-desktop-3\"></div>\n      <div className=\"ellipse-desktop-4\"></div>\n      <div className=\"ellipse-desktop-5\"></div>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default Details;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst KEY = 'da273fadec6e0549daf77f4eda281870';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst makeRequest = async path => {\n  const url = `${path}`;\n  try {\n    const response = await axios.get(url, {\n      params: { api_key: KEY },\n    });\n    return response.data;\n  } catch (error) {\n    toast.error('Error')\n    console.error(error);\n  }\n};\n\nexport const getListTrending = async () =>\n  await makeRequest('trending/movie/day?');\n\nexport const getIdMovie = async movieId =>\n  await makeRequest(`movie/${movieId}`);\n\nexport const getCastMovie = async movieId =>\n  await makeRequest(`movie/${movieId}/credits`);\n\nexport const getReviewsMovie = async movieId =>\n  await makeRequest(`movie/${movieId}/reviews`);\n\n\n  export const getSearchMovie = async search =>\n  await makeRequest(`search/movie?query=${search}&page=1`);\n//   export const getSearchMovie = async () =>\n//   await makeRequest(`search/movie?query=car&page=1`);\n\n//   async function getIdMovie(search) {\n//     try {\n//       const response = await axios.get(\n//         `movie/${search}?api_key=${KEY}&language=en-US`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n  \n//   async function getCastMovie(id) {\n//     try {\n//       const response = await axios.get(\n//         `movie/${id}/credits?api_key=${KEY}&language=en-US`\n//       );\n//       return response.data.cast;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n  \n//   async function getReviewsMovie(id) {\n//     try {\n//       const response = await axios.get(\n//         `movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n//       );\n//       return response.data.results;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n//   export {\n//     getListTrending,\n//     getIdMovie,\n//     getCastMovie,\n//     getReviewsMovie,\n//   };\n"],"names":["_jsx","className","children","Puff","height","width","radius","color","ariaLabel","Placeholder","Triangle","visible","wrapperStyle","wrapperClass","_ref","_location$state$from","_location$state","onGetCast","onGetReviews","movieId","useParams","lastPage","useLocation","state","from","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","isLoading","setIsLoading","memoMovie","useMemo","getIdMovie","memoCast","getCastMovie","memoReviews","getReviewsMovie","useEffect","then","res","length","cast","results","title","overview","vote_average","poster_path","genres","backdrop_path","runtime","release_date","production_countries","original_language","popularity","homepage","tagline","_jsxs","_Fragment","Link","to","type","src","concat","placeholderBackdrop","alt","slice","map","i","name","join","Math","round","floor","href","placeholderPoster","Loader","Suspense","Outlet","axios","makeRequest","_asyncToGenerator","_regeneratorRuntime","_callee","path","url","response","_context","prev","next","params","api_key","sent","abrupt","data","t0","toast","console","error","stop","_x","apply","arguments","getListTrending","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","_ref5","_callee5","_context5","_x4","getSearchMovie","_ref6","_callee6","search","_context6","_x5"],"sourceRoot":""}